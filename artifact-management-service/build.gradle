
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    [compile, runtime]*.resolutionStrategy {
        failOnVersionConflict()
    }

    all*.exclude group: 'org.eclipse.sisu', module: '*'
}

dependencies {

    compile "org.eclipse.aether:aether-api:$aetherVer"
    compile "org.eclipse.aether:aether-util:$aetherVer"
    compile "org.eclipse.aether:aether-impl:$aetherVer"
    compile "org.eclipse.aether:aether-connector-basic:$aetherVer"
    compile "org.eclipse.aether:aether-transport-file:$aetherVer"
    compile("org.eclipse.aether:aether-transport-http:$aetherVer") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    compile("org.apache.maven:maven-aether-provider:$mavenVer") {
        exclude group: 'org.eclipse.aether', module: '*'
    }
    compile "io.takari.aether:takari-local-repository:$takariLocalRepoVer"
    compile("io.takari:takari-filemanager:$takariFilemanVer") {
        exclude group: 'org.slf4j', module: '*'
    }
    compile("org.codehaus.plexus:plexus-container-default:$plexusVer") {
        exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
        exclude group: 'com.google.collections', module: 'google-collections'
        exclude group: 'commons-logging', module: '*'
        exclude group: 'junit', module: '*'
    }
}

shadowJar {
    dependencies {
        exclude(dependency('org.slf4j:slf4j-api'))
    }
    relocate 'com.google', 'com.alpine.com.google'
    relocate 'org', 'com.alpine.org'
    relocate 'io', 'com.alpine.io'

    // also need transformers?

    baseName = project.name + "-all"
    classifier = ''
}

publishing {
    repositories {
        maven {
            url 'file:///Users/jasonmiller/.m2/repository'
        }
    }

    publications {
        shadow(MavenPublication) {
            from components.shadow
            artifactId = project.name + "-all"
        }
    }
}